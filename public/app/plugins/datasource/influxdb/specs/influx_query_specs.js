/*! grafana - v2.6.0 - 2015-12-14
 * Copyright (c) 2015 Torkel Ã–degaard; Licensed Apache-2.0 */

define(["require","exports","test/lib/common","../influx_query"],function(a,b,c,d){c.describe("InfluxQuery",function(){c.describe("render series with mesurement only",function(){c.it("should generate correct query",function(){var a=new d({measurement:"cpu"}),b=a.render();c.expect(b).to.be('SELECT mean("value") FROM "cpu" WHERE $timeFilter GROUP BY time($interval) fill(null)')})}),c.describe("render series with math and alias",function(){c.it("should generate correct query",function(){var a=new d({measurement:"cpu",select:[[{type:"field",params:["value"]},{type:"mean",params:[]},{type:"math",params:["/100"]},{type:"alias",params:["text"]}]]}),b=a.render();c.expect(b).to.be('SELECT mean("value") /100 AS "text" FROM "cpu" WHERE $timeFilter GROUP BY time($interval) fill(null)')})}),c.describe("series with single tag only",function(){c.it("should generate correct query",function(){var a=new d({measurement:"cpu",groupBy:[{type:"time",params:["auto"]}],tags:[{key:"hostname",value:"server1"}]}),b=a.render();c.expect(b).to.be('SELECT mean("value") FROM "cpu" WHERE "hostname" = \'server1\' AND $timeFilter GROUP BY time($interval)')}),c.it("should switch regex operator with tag value is regex",function(){var a=new d({measurement:"cpu",groupBy:[{type:"time",params:["auto"]}],tags:[{key:"app",value:"/e.*/"}]}),b=a.render();c.expect(b).to.be('SELECT mean("value") FROM "cpu" WHERE "app" =~ /e.*/ AND $timeFilter GROUP BY time($interval)')})}),c.describe("series with multiple tags only",function(){c.it("should generate correct query",function(){var a=new d({measurement:"cpu",groupBy:[{type:"time",params:["auto"]}],tags:[{key:"hostname",value:"server1"},{key:"app",value:"email",condition:"AND"}]}),b=a.render();c.expect(b).to.be('SELECT mean("value") FROM "cpu" WHERE "hostname" = \'server1\' AND "app" = \'email\' AND $timeFilter GROUP BY time($interval)')})}),c.describe("series with tags OR condition",function(){c.it("should generate correct query",function(){var a=new d({measurement:"cpu",groupBy:[{type:"time",params:["auto"]}],tags:[{key:"hostname",value:"server1"},{key:"hostname",value:"server2",condition:"OR"}]}),b=a.render();c.expect(b).to.be('SELECT mean("value") FROM "cpu" WHERE "hostname" = \'server1\' OR "hostname" = \'server2\' AND $timeFilter GROUP BY time($interval)')})}),c.describe("series with groupByTag",function(){c.it("should generate correct query",function(){var a=new d({measurement:"cpu",tags:[],groupBy:[{type:"time",interval:"auto"},{type:"tag",params:["host"]}]}),b=a.render();c.expect(b).to.be('SELECT mean("value") FROM "cpu" WHERE $timeFilter GROUP BY time($interval), "host"')})}),c.describe("render series without group by",function(){c.it("should generate correct query",function(){var a=new d({measurement:"cpu",select:[[{type:"field",params:["value"]}]],groupBy:[]}),b=a.render();c.expect(b).to.be('SELECT "value" FROM "cpu" WHERE $timeFilter')})}),c.describe("render series without group by and fill",function(){c.it("should generate correct query",function(){var a=new d({measurement:"cpu",select:[[{type:"field",params:["value"]}]],groupBy:[{type:"time"},{type:"fill",params:["0"]}]}),b=a.render();c.expect(b).to.be('SELECT "value" FROM "cpu" WHERE $timeFilter GROUP BY time($interval) fill(0)')})}),c.describe("when adding group by part",function(){c.it("should add tag before fill",function(){var a=new d({measurement:"cpu",groupBy:[{type:"time"},{type:"fill"}]});a.addGroupBy("tag(host)"),c.expect(a.target.groupBy.length).to.be(3),c.expect(a.target.groupBy[1].type).to.be("tag"),c.expect(a.target.groupBy[1].params[0]).to.be("host"),c.expect(a.target.groupBy[2].type).to.be("fill")}),c.it("should add tag last if no fill",function(){var a=new d({measurement:"cpu",groupBy:[]});a.addGroupBy("tag(host)"),c.expect(a.target.groupBy.length).to.be(1),c.expect(a.target.groupBy[0].type).to.be("tag")})}),c.describe("when adding select part",function(){c.it("should add mean after after field",function(){var a=new d({measurement:"cpu",select:[[{type:"field",params:["value"]}]]});a.addSelectPart(a.selectModels[0],"mean"),c.expect(a.target.select[0].length).to.be(2),c.expect(a.target.select[0][1].type).to.be("mean")}),c.it("should replace sum by mean",function(){var a=new d({measurement:"cpu",select:[[{type:"field",params:["value"]},{type:"mean"}]]});a.addSelectPart(a.selectModels[0],"sum"),c.expect(a.target.select[0].length).to.be(2),c.expect(a.target.select[0][1].type).to.be("sum")}),c.it("should add math before alias",function(){var a=new d({measurement:"cpu",select:[[{type:"field",params:["value"]},{type:"mean"},{type:"alias"}]]});a.addSelectPart(a.selectModels[0],"math"),c.expect(a.target.select[0].length).to.be(4),c.expect(a.target.select[0][2].type).to.be("math")}),c.it("should add math last",function(){var a=new d({measurement:"cpu",select:[[{type:"field",params:["value"]},{type:"mean"}]]});a.addSelectPart(a.selectModels[0],"math"),c.expect(a.target.select[0].length).to.be(3),c.expect(a.target.select[0][2].type).to.be("math")}),c.it("should replace math",function(){var a=new d({measurement:"cpu",select:[[{type:"field",params:["value"]},{type:"mean"},{type:"math"}]]});a.addSelectPart(a.selectModels[0],"math"),c.expect(a.target.select[0].length).to.be(3),c.expect(a.target.select[0][2].type).to.be("math")})})})});